comment: 'Inherits rules from free form Fortran'
name: 'gcov-Fortran Free Form'
scopeName: 'source.fortran.free.gcov'
fileTypes: [
  'f90.gcov'
  'F90.gcov'
  'f95.gcov'
  'F95.gcov'
  'f03.gcov'
  'F03.gcov'
  'f08.gcov'
  'F08.gcov'
]
patterns: [
  {include: '#derived-type-definition'}
  {include: 'source.gcov'}
  {include: 'source.fortran.free'}
]
repository: {
  # This pattern is customized so a couple of "end type" regexes aren't
  # anchored to the start of a line. A much more general fix would be to
  # find a way for the GCOV markup added to the front of the line to be
  # "ignored" by all of the included patterns and skipped over as if it wasn't
  # even there. I don't think this is possible using the CSON grammar syntax
  # but may work using the new tree-sitter logic since I think I could just
  # call it an "extra".
  'derived-type-definition':
    'name': 'meta.derived-type.definition.fortran'
    'begin': '(?i)\\b(type)\\b(?!\\s*(\\(|is\\b|\\=))'
    'beginCaptures':
      '1': 'name': 'keyword.control.type.fortran'
    'end': '(?=[;!\\n])'
    'patterns': [
      {
        'comment': 'Attribute list.'
        'contentName': 'meta.attribute-list.fortran'
        'begin': '\\G(?=\\s*(,|::))'
        'end': '(::)|(?=[;!\\n])'
        'endCaptures':
          '1': 'name': 'keyword.operator.double-colon.fortran'
        'patterns': [
          {
            'begin': '(,)'
            'beginCaptures':
              '1': 'name': 'punctuation.comma.fortran'
            'end': '(?=::|[,;!\\n])'
            'patterns':[
              {'include': '$self'}
            ]
          }
        ]
      }
      {# body
        'begin': '(?i)\\s*\\b([a-z]\\w*)\\b'
        'beginCaptures':
          '1': 'name': 'entity.name.derived-type.fortran'
        'end': '(?i)\\s*(end\\s*type)(?:\\s+(?:(\\1)|(\\w+)))?\\b'
        #'end': '(?i)(?:^|(?<=;))\\s*(end\\s*type)(?:\\s+(?:(\\1)|(\\w+)))?\\b'
        'endCaptures':
          '1': 'name': 'keyword.control.endtype.fortran'
          '2': 'name': 'entity.name.derived-type.fortran'
          '3': 'name': 'invalid.error.fortran'
        'patterns':[
          {'include': '#dummy-variable-list'}
          {
            'comment': 'Derived type specification block.'
            'name': 'meta.block.specification.fortran'
            'begin': '(?i)(?!\\s*\\b(?:contains|end\\s*type)\\b)'
            'end': '(?i)(?=\\s*\\b(?:contains|end\\s*type)\\b)'
            #'begin': '(?i)^(?!\\s*\\b(?:contains|end\\s*type)\\b)'
            #'end': '(?i)^(?=\\s*\\b(?:contains|end\\s*type)\\b)'
            'patterns':[
              {'include': '$self'}
            ]
          }
          {# contains section
            'comment': 'Derived type contains block.'
            'name': 'meta.block.contains.fortran'
            'begin': '(?i)\\b(contains)\\b'
            'beginCaptures':
              '1': 'name': 'keyword.control.contains.fortran'
            'end': '(?i)(?=\\s*end\\s*type\\b)'
            'patterns':[
              {'include': '$self'}
            ]
          }
        ]
      }
    ]
}
